name: Build and Release

on:
  push:
    tags:
      - v*
  workflow_dispatch:

permissions: write-all

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build:
    name: ${{ matrix.runner }} - ${{ matrix.target }}
    runs-on: ${{ matrix.runner }}

    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: macos-14
            target: aarch64-apple-darwin
            friendly_id: macos-arm64
          - runner: macos-14
            target: x86_64-apple-darwin
            friendly_id: macos-x64
          - runner: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
            friendly_id: linux-x64-gnu
          - runner: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
            friendly_id: linux-arm64-gnu
          - runner: windows-latest
            target: x86_64-pc-windows-msvc
            friendly_id: windows-x64
          - runner: windows-11-arm
            target: aarch64-pc-windows-msvc
            friendly_id: windows-arm64

    steps:
      - name: Disable SSL Verify
        run: git config --global http.sslVerify false

      # - name: Setup MTK Certification
      #   uses: https://gitea.mediatek.inc/actions/mtk-cert-action@v1.2.0

      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup uv
        uses: astral-sh/setup-uv@v7
        with:
          version: "latest"
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: |
          uv add pyinstaller
          uv sync --no-dev

      - name: Packaging to Executable file
        run: |
          uv run pyinstaller -F src/${{ github.event.repository.name }}/cli.py --onefile -n ${{ github.event.repository.name }}

      - name: Stage Artifact
        shell: bash
        run: |
          set -euo pipefail
          dest="dist/${{ matrix.target }}"
          mkdir -p "$dest"
          bin="${{ github.event.repository.name }}"
          if [[ "${{ matrix.runner }}" == windows* ]]; then
            bin="${bin}.exe"
          fi
          mv "dist/${bin}" "${dest}/${bin}"

      - name: Create .zip (Windows)
        shell: powershell
        if: ${{ startsWith(matrix.runner, 'windows') }}
        run: |
          $ErrorActionPreference = "Stop"
          $dest = "dist/${{ matrix.target }}"
          $version = "${env:GITHUB_REF_NAME}".Substring(1)
          $bin = "${{ github.event.repository.name }}.exe"
          $zip = "${{ github.event.repository.name }}-v$version-${{ matrix.friendly_id }}.zip"
          Compress-Archive -Path "$dest\$bin" -DestinationPath "$dest\$zip" -Force

      - name: Create .tar.gz (all platforms)
        shell: bash
        if: ${{ !startsWith(matrix.runner, 'windows') }}
        run: |
          set -euo pipefail
          dest="dist/${{ matrix.target }}"
          version="${GITHUB_REF_NAME#v}"
          bin="${{ github.event.repository.name }}"
          archive="${{ github.event.repository.name }}-v${version}-${{ matrix.friendly_id }}.tar.gz"
          # Try to include .exe if present, otherwise fall back to unix name
          tar -C "$dest" -czf "$dest/${archive}" "${bin}" "${bin}.exe" 2>/dev/null || \
          tar -C "$dest" -czf "$dest/${archive}" "${bin}"
          # Remove raw binaries after archiving to avoid accidental upload
          rm -f "$dest/${bin}" "$dest/${bin}.exe" || true

      - name: Upload Artifacts
        uses: actions/upload-artifact@v5
        with:
          name: ${{ matrix.friendly_id }}
          path: dist/${{ matrix.target }}/*
          if-no-files-found: error
          retention-days: 7
          compression-level: 6
          overwrite: true

  package:
    name: Build Package
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version:
          - "3.11"

    steps:
      - name: Disable SSL Verify
        run: git config --global http.sslVerify false

      # - name: Setup MTK Certification
      #   uses: https://gitea.mediatek.inc/actions/mtk-cert-action@v1.2.0

      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup uv
        uses: astral-sh/setup-uv@v7
        with:
          version: "latest"
          python-version: ${{ matrix.python-version }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Version
        id: version
        shell: bash
        run: |
          VERSION=$(uvx dunamai from git --bump --no-metadata --style pep440)
          uv version $VERSION --frozen
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # - name: Update Version
      #   id: version
      #   shell: pwsh
      #   run: |
      #     [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
      #     $env:PYTHONUTF8 = "1"
      #     $VERSION = (uvx dunamai from git --bump --no-metadata --style pep440)
      #     uv version $VERSION --frozen
      #     echo "Version: $VERSION"
      #     echo "VERSION=$VERSION" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
      #     echo "version=$VERSION" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Build Package
        run: |
          uv build

      - name: Publish Package
        continue-on-error: true
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.UV_PUBLISH_TOKEN }}
        run: |
          uv publish

      - name: Upload Artifact
        uses: actions/upload-artifact@v5
        with:
          path: ./dist/*
          name: ${{ github.event.repository.name }}-py${{ matrix.python-version }}
          if-no-files-found: ignore
          retention-days: 7
          compression-level: 6
          overwrite: true

  release:
    name: Release Package
    needs:
      - build
      - package
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          path: dist
          merge-multiple: true

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/**/*
